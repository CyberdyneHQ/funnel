{% extends "layout.html.jinja2" %}
{% set title_suffix = project.title %}
{%- from "macros.html.jinja2" import project_header %}
{% from "baseframe/forms.html.jinja2" import renderfield %}
{% block title %}{% trans %}Manage membership{% endtrans %}{% endblock %}

{% block contenthead %}{% endblock %}

{% block bodytag %}
  {%- if not config['LEGACY'] -%}
    <body class="mui--bg-primary hg-app modal-form-page">
  {%- else %}
    <body class="mui--bg-primary">
  {%- endif %}
{% endblock %}

{% block baseheadline %}
  <div class="mui--hidden-md mui--hidden-lg mui--hidden-xl">
    <div class="mobile-nav mui--z1">
      <a href="{{ project.url_for() }}" aria-label="{% trans %}Back to the project{% endtrans %}" class="mui--text-dark mui--text-headline"><i class="material-icons mui--align-middle mobile-nav__prev" aria-hidden="true">arrow_back</i></a> <span class="mui--text-dark mui--text-headline">{% trans %}Manage membership{% endtrans %}</span>
    </div>
  </div>
  {{ project_header(project, project_save_form,
    class='mui--hidden-xs mui--hidden-sm',
    current_page='schedule') }}
{% endblock %}

{% block basecontent %}
  <div class="mui-container">
  <div class="page-content page-content--mob-nav">
    <div class="grid" id="membership">
      <div class="grid__col-xs-12">
        {% raw %}
        <div id="manage-membership">
          <div class="membership-wrapper--right">
            <div class="content-box mui--z1" @click="showInfo = !showInfo" role="button" aria-label="What role should I assign? Read more">
              <p class="mui--text-headline mui--text-bold">What role should I assign?</p>
              <p class="mui--text-subhead">Read this before adding a new member <i aria-hidden="true" class="material-icons mui--align-middle" v-if="showInfo">keyboard_arrow_up</i><i aria-hidden="true" class="material-icons mui--align-middle" v-else>keyboard_arrow_down</i></p>
              <transition name="slide-fade">
                <div class="membership-wrapper__info" v-if="showInfo">
                  <h4><i class="material-icons mui--text-title mui--align-middle">vpn_key</i> <span class="mui--text-headline mui--text-bold mui--text-center">Member roles</span></h4>
                  <p class="mui--text-title mui--text-uppercase">Editor</p>
                  <ul class="mui-list--unstyled">
                    <li><i class="material-icons mui--text-body1 mui--align-middle">check_circle_outline</i> <span class="mui--text-subhead">Lorem ipsum dolor sit amet</span></li>
                    <li><i class="material-icons mui--text-body1 mui--align-middle">check_circle_outline</i> <span class="mui--text-subhead">Lorem ipsum dolor sit amet</span></li>
                  </ul>
                  <hr>
                  <p class="mui--text-title mui--text-uppercase">Concierge</p>
                  <ul class="mui-list--unstyled">
                    <li><i class="material-icons mui--text-body1 mui--align-middle">check_circle_outline</i> <span class="mui--text-subhead">Lorem ipsum dolor sit amet</span></li>
                    <li><i class="material-icons mui--text-body1 mui--align-middle">check_circle_outline</i> <span class="mui--text-subhead">Lorem ipsum dolor sit amet</span></li>
                  </ul>
                  <hr>
                  <p class="mui--text-title mui--text-uppercase">Usher</p>
                  <ul class="mui-list--unstyled">
                    <li><i class="material-icons mui--text-body1 mui--align-middle">check_circle_outline</i> <span class="mui--text-subhead">Lorem ipsum dolor sit amet</span></li>
                    <li><i class="material-icons mui--text-body1 mui--align-middle">check_circle_outline</i> <span class="mui--text-subhead">Lorem ipsum dolor sit amet</span></li>
                  </ul>
                  <hr>
                </div>
              </transition>
            </div>
          </div>
          <div class="membership-wrapper--right">
            <div class="mui--clearfix">
              <div class="mui--text-center btn-wrapper membership-wrapper--left" v-if="admin">
                <button class="mui-btn mui-btn--raised mui-btn--primary full-width-btn" @click="fetchForm($event, newMemberUrl)" aria-label="Add new member"><i class="material-icons mui--align-middle mui--text-title" aria-hidden="true">add</i> Add new member</p></button>
                <hr class="mui--hidden-xl">
              </div>
              <div class="mui--text-center" v-if="members" :class="[admin? 'membership-wrapper--right': '']">
                <form class="mui-form mui--d-inlineblock search mui--z1">
                  <div class="mui-textfield">
                    <input class="field-search" type="text" name="key" value="" placeholder="Search member..." v-model="search" @input="onChange"/>
                  </div>
                </form>
              </div>
            </div>
            <div v-if="members">
              <div class="mui--clearfix membership-wrapper__filter">
                <p class="mui--text-title mui--pull-left">{{ members.length }} <span v-if="members.length > 1">members</span><span v-else>member</span></p>
                <div class="mui--pull-right">
                   <button class="mui-btn mui-btn--nostyle mui--text-title" @click="filter($event, 'name')" :class="[view == 'name' ? 'mui--text-bold mui--text-underline' : 'mui--text-light']">Name</button>
                    <button class="mui-btn mui-btn--nostyle mui--text-light mui--text-title" @click="filter($event, 'role')"  :class="[view == 'role' ? 'mui--text-bold mui--text-underline' : 'mui--text-light']">Role</button>
                </div>
              </div>
              <div v-if="view == 'role'" class="membership-wrapper__members">
                <div v-for="role in roles">
                  <p class="mui--text-subhead membership-wrapper__members__collapsible__header" @click="collapse($event, role)"> {{ role.roleName }}
                    <i class="material-icons mui--align-middle mui--pull-right collapsible__icon" aria-hidden="true" v-if="!role.showMembers">keyboard_arrow_right</i>
                    <i class="material-icons mui--align-middle mui--pull-right collapsible__icon" aria-hidden="true" v-if="role.showMembers">keyboard_arrow_down</i>
                  </p>
                  <transition name="slide-fade">
                    <div v-if="role.showMembers">
                      <div class="membership-wrapper__members__list membership-wrapper__members__list--nomargin" v-for="member in members" :class="[search && member.hide ? 'mui--hide' : '', admin ?  '' : 'membership-wrapper__members__list--viewonly']" @click="fetchForm($event, member.edit_url, member)" title="Edit" aria-label="Edit" role="button" v-if="member[role.roleKey]">
                        <member :member="member"></member>
                      </div>
                    </div>
                  </transition>
                </div>
              </div>
              <div v-if="view == 'name'" class="membership-wrapper__members">
                <div class="membership-wrapper__members__list" v-for="member in members" :class="[search && member.hide ? 'mui--hide' : '', admin ? '' : 'membership-wrapper__members__list--viewonly']" @click="fetchForm($event, member.edit_url, member)" title="Edit" aria-label="Edit" role="button">
                  <member :member="member"></member>
                </div>
              </div>
            </div>
            <div class="mui--bg-accent" v-else>
              <p class="mui--text-center zero-bottom-margin"><i class="material-icons mui--text-display1 mui--text-light">people</i></p>
              <p class="mui--text-subhead mui--text-bold mui--text-center zero-bottom-margin">No members found</p>
              <p class="mui--text-body1 mui--text-center mui--text-light zero-bottom-margin">Members you add will appear here...</p>
            </div>
            <div id="member-form" class="modal modal-form" :class="[activeMember ? 'modal-form--edit' : '']">
              <component :is="Form"></component>
              <div class="modal-form__action-box mui--bg-accent">
                <p class="mui--text-subhead mui--text-danger mui--text-right" v-if="errorMsg">{{ errorMsg }}</p>
                <button class="mui-btn mui-btn--nostyle mui--text-light" @click="closeForm($event)">Cancel</button>
              </div>
              <div v-if="activeMember" class="modal-form__action-box--revoke mui--text-center">
                <button @click="fetchForm($event, deleteURL)" title="Delete" class="mui-btn mui-btn--nostyle mui--text-subhead"><span class="mui--text-light">Revoke this membership - </span><span class="mui--text-bold">Revoke</span></button>
              </div>
            </div>
          </div>
        {% endraw %}
      </div>
    </div>
  </div>
</div>
{% raw %}
<script type="text/x-template" id="member-template">
  <div class="user-box mui--clearfix">
    <img class="user-gravatar" :src=member.user_avatar :alt=member.user_details.fullname :aria-label=member.user_details.fullname v-if="member.user_avatar"/>
    <img class="user-gravatar" src="https://www.gravatar.com/avatar/00000000000000000000000000000000?d=mp&f=y" :alt=member.user_details.fullname :aria-label=member.user_details.fullname v-else/>
    <div class="mui--d-inlineblock">
    <h3 class="mui--text-title zero-top-margin zero-bottom-margin">{{ member.user_details.fullname }}</h3>
    <h3 v-if="member.user_details.username" class="mui--text-subhead zero-top-margin zero-bottom-margin"><span>@{{ member.user_details.username }}</span></h3>
    </div>
    <ul class="mui-list--inline mui--text-subhead zero-bottom-margin membership-wrapper__members__list__roles">
      <li v-if="member.is_editor" class="membership-wrapper__members__list__roles__role mui--text-body1">Editor</li>
      <li v-if="member.is_concierge" class="membership-wrapper__members__list__roles__role mui--text-body1">Concierge</li>
      <li v-if="member.is_usher" class="membership-wrapper__members__list__roles__role mui--text-body1">Usher</li>
      <li class="mui--text-light membership-wrapper__members__list__roles__count mui--text-caption" v-if="rolesCount(member) > 1">+ {{ rolesCount(member) }} more <span v-if="rolesCount(member) > 1">roles</span><span v-else>role</span></li>
    </ul>
  </div>
</script>
{% endraw %}
{% endblock %}

{% block footerscripts %}
  <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/vue-script2@2.1.0/dist/vue-script2.min.js"></script>
  <script type="text/javascript">
    $(function() {


      function getElementId(htmlString) {
        return htmlString.match(/id="(.*?)"/)[1];
      }

      function formErrorHandler(formId, errorResponse) {
        let errorMsg = '';
        // xhr readyState '4' indicates server has received the request & response is ready
        if (errorResponse.readyState === 4) {
          if (errorResponse.status === 500) {
            errorMsg = 'Internal Server Error';
          } else {
            if (errorResponse.responseJSON.errors) {
              window.Baseframe.Forms.showValidationErrors(formId, errorResponse.responseJSON.errors);
            }
            errorMsg = errorResponse.responseJSON.message ? errorResponse.responseJSON.message : 'Error';
          }
        } else {
          errorMsg = 'Unable to connect. Please try again.';
        }
        $(`#${formId}`).find('button[type="submit"]').prop('disabled', false);
        $(`#${formId}`).find('.loading').addClass('mui--hide');
        return errorMsg;
      }

      function getActionUrl(formId) {
        return $(`#${formId}`).attr('action');
      }

      const Membership = {
        init({newMemberUrl, members='', divElem, memberTemplate, isUserProfileAdmin}) {
          Vue.use(VueScript2);

          let memberUI = Vue.component('member', {
            template: memberTemplate,
            props: ['member'],
            methods: {
              rolesCount(member) {
                let count = 0;
                if (member.is_editor) count++;
                if (member.is_concierge) count++;
                if (member.is_usher) count++;
                return count - 1;
              },
            },
          });

          let MembershipComponent = new Vue({
            el: divElem,
            components: {
              memberUI
            },
            data: function () {
              return {
                newMemberUrl: newMemberUrl,
                members: members.length > 0 ? members : '',
                admin: isUserProfileAdmin,
                roles: [
                  {
                    roleKey: 'is_editor',
                    roleName: 'Editor',
                    showMembers: false,
                  },
                  {
                    roleKey: 'is_concierge',
                    roleName: 'Concierge',
                    showMembers: false,
                  },
                  {
                    roleKey: 'is_usher',
                    roleName: 'Usher',
                    showMembers: false,
                  },
                ],
                memberForm: '',
                activeMember: '',
                errorMsg: '',
                view: 'name',
                search: '',
                showInfo: false,
              }
            },
            methods: {
              fetchForm(event, url, member='') {
                event.preventDefault();
                if(this.admin) {
                  this.activeMember = member;
                  let app = this;
                  $.ajax({
                    type: 'GET',
                    url: url,
                    timeout: window.HasGeek.config.ajaxTimeout,
                    dataType: 'json',
                    success: function(data) {
                      let vueFormHtml = data.form;
                      app.memberForm = vueFormHtml.replace(/\bscript\b/g, 'script2');
                      $('#member-form').modal('show');
                    }
                  });
                }
              },
              activateForm() {
                const formId = getElementId(this.memberForm);
                const url = getActionUrl(formId);
                let app = this;
                let onSuccess = (responseData) => {
                  this.closeForm();
                  if(responseData.memberships) {
                    app.updateMembersList(responseData.memberships);
                  }
                }
                let onError = (response) => {
                  this.errorMsg = formErrorHandler(formId, response);
                }
                Baseframe.Forms.handleFormSubmit(formId, url, onSuccess, onError, {});
              },
              updateMembersList(members) {
                this.members = members.length > 0 ? members : '';
              },
              filter(event, action) {
                event.preventDefault();
                this.view = action;
              },
              closeForm(event='') {
                if (event) event.preventDefault();
                $.modal.close();
                this.errorMsg = '';
              },
              onChange() {
                if (this.search) {
                  members.filter(member => member.hide = member.user_details.fullname.toLowerCase().indexOf(this.search.toLowerCase()) === -1)
                }
              },
              collapse(event, role) {
                event.preventDefault();
                role.showMembers = !role.showMembers;
              },
              showRoleDetails(event) {
                event.preventDefault();
                this.showInfo = !this.showInfo;
              },
            },
            computed: {
              Form() {
                const template = this.memberForm ? this.memberForm : '<div></div>';
                const isFormTemplate = this.memberForm ? true : false;
                return {
                  template,
                  mounted() {
                    if (isFormTemplate) {
                      this.$parent.activateForm();
                    }
                  },
                };
              },
              deleteURL() {
                return this.activeMember.delete_url;
              },
            },
            mounted() {
              $("#member-form").on($.modal.CLOSE, () => {
                this.closeForm();
              });
            },
          });
        },
      }

      window.HasGeek.Membership = function (config) {
        Membership.init(config);
      }

      var membershipConfig = {
        newMemberUrl: "{{ project.url_for('new_member') }}",
        members: {{ memberships|tojson }},
        divElem: "#manage-membership",
        memberTemplate: '#member-template',
        isUserProfileAdmin: {%- if project.current_roles.profile_admin %} true {% else %} false {%- endif %},
      };

      HasGeek.Membership(membershipConfig);

      // $(() => {
      //   window.HasGeek.Membership = function (config) {
      //     Membership.init(config);
      //   }
      // });

    });
  </script>
{% endblock %}
